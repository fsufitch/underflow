// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package rpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type HandshakeRequest struct {
	MinionID             string   `protobuf:"bytes,1,opt,name=minionID,proto3" json:"minionID,omitempty"`
	AuthToken            string   `protobuf:"bytes,2,opt,name=authToken,proto3" json:"authToken,omitempty"`
	SchemaChecksum       string   `protobuf:"bytes,3,opt,name=schemaChecksum,proto3" json:"schemaChecksum,omitempty"`
	SupportedField       []string `protobuf:"bytes,4,rep,name=supportedField,proto3" json:"supportedField,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HandshakeRequest) Reset()         { *m = HandshakeRequest{} }
func (m *HandshakeRequest) String() string { return proto.CompactTextString(m) }
func (*HandshakeRequest) ProtoMessage()    {}
func (*HandshakeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{0}
}

func (m *HandshakeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HandshakeRequest.Unmarshal(m, b)
}
func (m *HandshakeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HandshakeRequest.Marshal(b, m, deterministic)
}
func (m *HandshakeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HandshakeRequest.Merge(m, src)
}
func (m *HandshakeRequest) XXX_Size() int {
	return xxx_messageInfo_HandshakeRequest.Size(m)
}
func (m *HandshakeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HandshakeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HandshakeRequest proto.InternalMessageInfo

func (m *HandshakeRequest) GetMinionID() string {
	if m != nil {
		return m.MinionID
	}
	return ""
}

func (m *HandshakeRequest) GetAuthToken() string {
	if m != nil {
		return m.AuthToken
	}
	return ""
}

func (m *HandshakeRequest) GetSchemaChecksum() string {
	if m != nil {
		return m.SchemaChecksum
	}
	return ""
}

func (m *HandshakeRequest) GetSupportedField() []string {
	if m != nil {
		return m.SupportedField
	}
	return nil
}

type HandshakeResponse struct {
	Ok                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HandshakeResponse) Reset()         { *m = HandshakeResponse{} }
func (m *HandshakeResponse) String() string { return proto.CompactTextString(m) }
func (*HandshakeResponse) ProtoMessage()    {}
func (*HandshakeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{1}
}

func (m *HandshakeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HandshakeResponse.Unmarshal(m, b)
}
func (m *HandshakeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HandshakeResponse.Marshal(b, m, deterministic)
}
func (m *HandshakeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HandshakeResponse.Merge(m, src)
}
func (m *HandshakeResponse) XXX_Size() int {
	return xxx_messageInfo_HandshakeResponse.Size(m)
}
func (m *HandshakeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HandshakeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HandshakeResponse proto.InternalMessageInfo

func (m *HandshakeResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

type ReverseHandshakeRequest struct {
	AuthToken            string   `protobuf:"bytes,1,opt,name=authToken,proto3" json:"authToken,omitempty"`
	SchemaChecksum       string   `protobuf:"bytes,2,opt,name=schemaChecksum,proto3" json:"schemaChecksum,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReverseHandshakeRequest) Reset()         { *m = ReverseHandshakeRequest{} }
func (m *ReverseHandshakeRequest) String() string { return proto.CompactTextString(m) }
func (*ReverseHandshakeRequest) ProtoMessage()    {}
func (*ReverseHandshakeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{2}
}

func (m *ReverseHandshakeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReverseHandshakeRequest.Unmarshal(m, b)
}
func (m *ReverseHandshakeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReverseHandshakeRequest.Marshal(b, m, deterministic)
}
func (m *ReverseHandshakeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReverseHandshakeRequest.Merge(m, src)
}
func (m *ReverseHandshakeRequest) XXX_Size() int {
	return xxx_messageInfo_ReverseHandshakeRequest.Size(m)
}
func (m *ReverseHandshakeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReverseHandshakeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReverseHandshakeRequest proto.InternalMessageInfo

func (m *ReverseHandshakeRequest) GetAuthToken() string {
	if m != nil {
		return m.AuthToken
	}
	return ""
}

func (m *ReverseHandshakeRequest) GetSchemaChecksum() string {
	if m != nil {
		return m.SchemaChecksum
	}
	return ""
}

type ReverseHandshakeResponse struct {
	Ok                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	MinionID             string   `protobuf:"bytes,2,opt,name=minionID,proto3" json:"minionID,omitempty"`
	SupportedField       []string `protobuf:"bytes,3,rep,name=supportedField,proto3" json:"supportedField,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReverseHandshakeResponse) Reset()         { *m = ReverseHandshakeResponse{} }
func (m *ReverseHandshakeResponse) String() string { return proto.CompactTextString(m) }
func (*ReverseHandshakeResponse) ProtoMessage()    {}
func (*ReverseHandshakeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{3}
}

func (m *ReverseHandshakeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReverseHandshakeResponse.Unmarshal(m, b)
}
func (m *ReverseHandshakeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReverseHandshakeResponse.Marshal(b, m, deterministic)
}
func (m *ReverseHandshakeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReverseHandshakeResponse.Merge(m, src)
}
func (m *ReverseHandshakeResponse) XXX_Size() int {
	return xxx_messageInfo_ReverseHandshakeResponse.Size(m)
}
func (m *ReverseHandshakeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReverseHandshakeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReverseHandshakeResponse proto.InternalMessageInfo

func (m *ReverseHandshakeResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *ReverseHandshakeResponse) GetMinionID() string {
	if m != nil {
		return m.MinionID
	}
	return ""
}

func (m *ReverseHandshakeResponse) GetSupportedField() []string {
	if m != nil {
		return m.SupportedField
	}
	return nil
}

type ReverseHandshakeAckRequest struct {
	Ok                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReverseHandshakeAckRequest) Reset()         { *m = ReverseHandshakeAckRequest{} }
func (m *ReverseHandshakeAckRequest) String() string { return proto.CompactTextString(m) }
func (*ReverseHandshakeAckRequest) ProtoMessage()    {}
func (*ReverseHandshakeAckRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{4}
}

func (m *ReverseHandshakeAckRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReverseHandshakeAckRequest.Unmarshal(m, b)
}
func (m *ReverseHandshakeAckRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReverseHandshakeAckRequest.Marshal(b, m, deterministic)
}
func (m *ReverseHandshakeAckRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReverseHandshakeAckRequest.Merge(m, src)
}
func (m *ReverseHandshakeAckRequest) XXX_Size() int {
	return xxx_messageInfo_ReverseHandshakeAckRequest.Size(m)
}
func (m *ReverseHandshakeAckRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReverseHandshakeAckRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReverseHandshakeAckRequest proto.InternalMessageInfo

func (m *ReverseHandshakeAckRequest) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

type ReverseHandshakeAckResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReverseHandshakeAckResponse) Reset()         { *m = ReverseHandshakeAckResponse{} }
func (m *ReverseHandshakeAckResponse) String() string { return proto.CompactTextString(m) }
func (*ReverseHandshakeAckResponse) ProtoMessage()    {}
func (*ReverseHandshakeAckResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{5}
}

func (m *ReverseHandshakeAckResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReverseHandshakeAckResponse.Unmarshal(m, b)
}
func (m *ReverseHandshakeAckResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReverseHandshakeAckResponse.Marshal(b, m, deterministic)
}
func (m *ReverseHandshakeAckResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReverseHandshakeAckResponse.Merge(m, src)
}
func (m *ReverseHandshakeAckResponse) XXX_Size() int {
	return xxx_messageInfo_ReverseHandshakeAckResponse.Size(m)
}
func (m *ReverseHandshakeAckResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReverseHandshakeAckResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReverseHandshakeAckResponse proto.InternalMessageInfo

type MasterMessage struct {
	// Types that are valid to be assigned to MessageType:
	//	*MasterMessage_CheckStatus_
	MessageType          isMasterMessage_MessageType `protobuf_oneof:"messageType"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *MasterMessage) Reset()         { *m = MasterMessage{} }
func (m *MasterMessage) String() string { return proto.CompactTextString(m) }
func (*MasterMessage) ProtoMessage()    {}
func (*MasterMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{6}
}

func (m *MasterMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MasterMessage.Unmarshal(m, b)
}
func (m *MasterMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MasterMessage.Marshal(b, m, deterministic)
}
func (m *MasterMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MasterMessage.Merge(m, src)
}
func (m *MasterMessage) XXX_Size() int {
	return xxx_messageInfo_MasterMessage.Size(m)
}
func (m *MasterMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_MasterMessage.DiscardUnknown(m)
}

var xxx_messageInfo_MasterMessage proto.InternalMessageInfo

type isMasterMessage_MessageType interface {
	isMasterMessage_MessageType()
}

type MasterMessage_CheckStatus_ struct {
	CheckStatus *MasterMessage_CheckStatus `protobuf:"bytes,1,opt,name=checkStatus,proto3,oneof"`
}

func (*MasterMessage_CheckStatus_) isMasterMessage_MessageType() {}

func (m *MasterMessage) GetMessageType() isMasterMessage_MessageType {
	if m != nil {
		return m.MessageType
	}
	return nil
}

func (m *MasterMessage) GetCheckStatus() *MasterMessage_CheckStatus {
	if x, ok := m.GetMessageType().(*MasterMessage_CheckStatus_); ok {
		return x.CheckStatus
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*MasterMessage) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*MasterMessage_CheckStatus_)(nil),
	}
}

type MasterMessage_CheckStatus struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MasterMessage_CheckStatus) Reset()         { *m = MasterMessage_CheckStatus{} }
func (m *MasterMessage_CheckStatus) String() string { return proto.CompactTextString(m) }
func (*MasterMessage_CheckStatus) ProtoMessage()    {}
func (*MasterMessage_CheckStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{6, 0}
}

func (m *MasterMessage_CheckStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MasterMessage_CheckStatus.Unmarshal(m, b)
}
func (m *MasterMessage_CheckStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MasterMessage_CheckStatus.Marshal(b, m, deterministic)
}
func (m *MasterMessage_CheckStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MasterMessage_CheckStatus.Merge(m, src)
}
func (m *MasterMessage_CheckStatus) XXX_Size() int {
	return xxx_messageInfo_MasterMessage_CheckStatus.Size(m)
}
func (m *MasterMessage_CheckStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_MasterMessage_CheckStatus.DiscardUnknown(m)
}

var xxx_messageInfo_MasterMessage_CheckStatus proto.InternalMessageInfo

type MinionMessage struct {
	// Types that are valid to be assigned to MessageType:
	//	*MinionMessage_MinionStatus_
	MessageType          isMinionMessage_MessageType `protobuf_oneof:"messageType"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *MinionMessage) Reset()         { *m = MinionMessage{} }
func (m *MinionMessage) String() string { return proto.CompactTextString(m) }
func (*MinionMessage) ProtoMessage()    {}
func (*MinionMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{7}
}

func (m *MinionMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MinionMessage.Unmarshal(m, b)
}
func (m *MinionMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MinionMessage.Marshal(b, m, deterministic)
}
func (m *MinionMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MinionMessage.Merge(m, src)
}
func (m *MinionMessage) XXX_Size() int {
	return xxx_messageInfo_MinionMessage.Size(m)
}
func (m *MinionMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_MinionMessage.DiscardUnknown(m)
}

var xxx_messageInfo_MinionMessage proto.InternalMessageInfo

type isMinionMessage_MessageType interface {
	isMinionMessage_MessageType()
}

type MinionMessage_MinionStatus_ struct {
	MinionStatus *MinionMessage_MinionStatus `protobuf:"bytes,1,opt,name=minionStatus,proto3,oneof"`
}

func (*MinionMessage_MinionStatus_) isMinionMessage_MessageType() {}

func (m *MinionMessage) GetMessageType() isMinionMessage_MessageType {
	if m != nil {
		return m.MessageType
	}
	return nil
}

func (m *MinionMessage) GetMinionStatus() *MinionMessage_MinionStatus {
	if x, ok := m.GetMessageType().(*MinionMessage_MinionStatus_); ok {
		return x.MinionStatus
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*MinionMessage) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*MinionMessage_MinionStatus_)(nil),
	}
}

type MinionMessage_MinionStatus struct {
	Timestamp            *timestamp.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	TotalCapacity        uint32               `protobuf:"varint,2,opt,name=totalCapacity,proto3" json:"totalCapacity,omitempty"`
	BusyCapacity         uint64               `protobuf:"varint,3,opt,name=busyCapacity,proto3" json:"busyCapacity,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *MinionMessage_MinionStatus) Reset()         { *m = MinionMessage_MinionStatus{} }
func (m *MinionMessage_MinionStatus) String() string { return proto.CompactTextString(m) }
func (*MinionMessage_MinionStatus) ProtoMessage()    {}
func (*MinionMessage_MinionStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{7, 0}
}

func (m *MinionMessage_MinionStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MinionMessage_MinionStatus.Unmarshal(m, b)
}
func (m *MinionMessage_MinionStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MinionMessage_MinionStatus.Marshal(b, m, deterministic)
}
func (m *MinionMessage_MinionStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MinionMessage_MinionStatus.Merge(m, src)
}
func (m *MinionMessage_MinionStatus) XXX_Size() int {
	return xxx_messageInfo_MinionMessage_MinionStatus.Size(m)
}
func (m *MinionMessage_MinionStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_MinionMessage_MinionStatus.DiscardUnknown(m)
}

var xxx_messageInfo_MinionMessage_MinionStatus proto.InternalMessageInfo

func (m *MinionMessage_MinionStatus) GetTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *MinionMessage_MinionStatus) GetTotalCapacity() uint32 {
	if m != nil {
		return m.TotalCapacity
	}
	return 0
}

func (m *MinionMessage_MinionStatus) GetBusyCapacity() uint64 {
	if m != nil {
		return m.BusyCapacity
	}
	return 0
}

func init() {
	proto.RegisterType((*HandshakeRequest)(nil), "underflow.common.HandshakeRequest")
	proto.RegisterType((*HandshakeResponse)(nil), "underflow.common.HandshakeResponse")
	proto.RegisterType((*ReverseHandshakeRequest)(nil), "underflow.common.ReverseHandshakeRequest")
	proto.RegisterType((*ReverseHandshakeResponse)(nil), "underflow.common.ReverseHandshakeResponse")
	proto.RegisterType((*ReverseHandshakeAckRequest)(nil), "underflow.common.ReverseHandshakeAckRequest")
	proto.RegisterType((*ReverseHandshakeAckResponse)(nil), "underflow.common.ReverseHandshakeAckResponse")
	proto.RegisterType((*MasterMessage)(nil), "underflow.common.MasterMessage")
	proto.RegisterType((*MasterMessage_CheckStatus)(nil), "underflow.common.MasterMessage.CheckStatus")
	proto.RegisterType((*MinionMessage)(nil), "underflow.common.MinionMessage")
	proto.RegisterType((*MinionMessage_MinionStatus)(nil), "underflow.common.MinionMessage.MinionStatus")
}

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 538 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xc5, 0x4e, 0xa9, 0x9a, 0x49, 0x5d, 0x85, 0x45, 0x82, 0x68, 0x01, 0xa5, 0x72, 0x11, 0x2a,
	0x10, 0x5c, 0x14, 0x2e, 0x5c, 0x69, 0x10, 0x2a, 0x87, 0x80, 0xe4, 0x84, 0x0b, 0x17, 0xb4, 0x71,
	0xa6, 0x89, 0xe5, 0xd8, 0x6b, 0xbc, 0xeb, 0xa2, 0x5c, 0xb8, 0x72, 0xe7, 0xcc, 0x6f, 0xe1, 0xca,
	0xdf, 0x42, 0x59, 0xc7, 0x8e, 0xbf, 0xc0, 0x39, 0xee, 0xec, 0x9b, 0xd9, 0xf7, 0xde, 0xbe, 0x01,
	0x43, 0x60, 0x74, 0xe3, 0x3a, 0x68, 0x85, 0x11, 0x97, 0x9c, 0x74, 0xe3, 0x60, 0x8e, 0xd1, 0xf5,
	0x8a, 0x7f, 0xb3, 0x1c, 0xee, 0xfb, 0x3c, 0xa0, 0xfd, 0x05, 0xe7, 0x8b, 0x15, 0x5e, 0xa8, 0xfb,
	0x59, 0x7c, 0x7d, 0x21, 0x5d, 0x1f, 0x85, 0x64, 0x7e, 0x98, 0xb4, 0x98, 0xbf, 0x34, 0xe8, 0x5e,
	0xb1, 0x60, 0x2e, 0x96, 0xcc, 0x43, 0x1b, 0xbf, 0xc6, 0x28, 0x24, 0xa1, 0x70, 0xe4, 0xbb, 0x81,
	0xcb, 0x83, 0xf7, 0x6f, 0x7b, 0xda, 0xa9, 0x76, 0xde, 0xb6, 0xb3, 0x33, 0x79, 0x08, 0x6d, 0x16,
	0xcb, 0xe5, 0x94, 0x7b, 0x18, 0xf4, 0x74, 0x75, 0xb9, 0x2b, 0x90, 0x27, 0x70, 0x22, 0x9c, 0x25,
	0xfa, 0x6c, 0xb4, 0x44, 0xc7, 0x13, 0xb1, 0xdf, 0x6b, 0x29, 0x48, 0xa9, 0xaa, 0x70, 0x71, 0x18,
	0xf2, 0x48, 0xe2, 0xfc, 0x9d, 0x8b, 0xab, 0x79, 0xef, 0xe0, 0xb4, 0xa5, 0x70, 0x85, 0xaa, 0x79,
	0x06, 0x77, 0x72, 0xec, 0x44, 0xc8, 0x03, 0x81, 0xe4, 0x04, 0x74, 0xee, 0x29, 0x62, 0x47, 0xb6,
	0xce, 0x3d, 0xf3, 0x0b, 0xdc, 0xb7, 0xf1, 0x06, 0x23, 0x81, 0x15, 0x25, 0x05, 0xb6, 0x5a, 0x33,
	0x5b, 0xbd, 0x8e, 0xad, 0x19, 0x40, 0xaf, 0xfa, 0x40, 0x3d, 0x99, 0x82, 0x77, 0x7a, 0xc9, 0xbb,
	0xaa, 0xea, 0x56, 0xad, 0xea, 0x01, 0xd0, 0xf2, 0x7b, 0x6f, 0x1c, 0x2f, 0xd5, 0x54, 0x96, 0xff,
	0x08, 0x1e, 0xd4, 0xa2, 0x13, 0x82, 0xe6, 0x77, 0x30, 0xc6, 0x4c, 0x48, 0x8c, 0xc6, 0x28, 0x04,
	0x5b, 0x20, 0xf9, 0x08, 0x1d, 0x67, 0xa3, 0x6c, 0x22, 0x99, 0x8c, 0x85, 0x1a, 0xd4, 0x19, 0x3e,
	0xb7, 0xca, 0xd9, 0xb1, 0x0a, 0x5d, 0xd6, 0x68, 0xd7, 0x72, 0x75, 0xcb, 0xce, 0x4f, 0xa0, 0x06,
	0x74, 0x72, 0xb7, 0x97, 0x06, 0x74, 0xfc, 0xa4, 0x69, 0xba, 0x0e, 0xd1, 0xfc, 0xa1, 0x83, 0x31,
	0x56, 0x0e, 0xa4, 0x04, 0x6c, 0x38, 0x4e, 0x2c, 0x29, 0x30, 0x18, 0xd4, 0x30, 0xc8, 0xb7, 0x6d,
	0x4f, 0x19, 0x85, 0xc2, 0x0c, 0xfa, 0x53, 0x83, 0xe3, 0x3c, 0x80, 0xbc, 0x86, 0x76, 0x96, 0xf5,
	0xed, 0x0b, 0xd4, 0x4a, 0xb6, 0xc1, 0x4a, 0xb7, 0xc1, 0x9a, 0xa6, 0x08, 0x7b, 0x07, 0x26, 0x8f,
	0xc1, 0x90, 0x5c, 0xb2, 0xd5, 0x88, 0x85, 0xcc, 0x71, 0xe5, 0x5a, 0x7d, 0xa3, 0x61, 0x17, 0x8b,
	0xc4, 0x84, 0xe3, 0x59, 0x2c, 0xd6, 0x19, 0x68, 0x93, 0xf3, 0x03, 0xbb, 0x50, 0x2b, 0x39, 0x31,
	0xfc, 0xad, 0xc1, 0xbd, 0x4f, 0xa9, 0xc6, 0xc4, 0xdd, 0x49, 0xb2, 0xbf, 0x64, 0x0a, 0xed, 0xec,
	0xf3, 0x88, 0x59, 0x75, 0xa2, 0x1c, 0x6c, 0x7a, 0xf6, 0x5f, 0xcc, 0x36, 0x9b, 0x1f, 0xe0, 0x70,
	0x22, 0x23, 0x64, 0x3e, 0xe9, 0x37, 0x98, 0x4b, 0xfb, 0x0d, 0xff, 0x7f, 0xae, 0xbd, 0xd4, 0x86,
	0x7f, 0xf4, 0xbc, 0x80, 0xc4, 0xed, 0xad, 0x00, 0x17, 0xba, 0xe5, 0x10, 0x92, 0xa7, 0xd5, 0x99,
	0xff, 0xd8, 0x53, 0xfa, 0x6c, 0x1f, 0xe8, 0x56, 0x55, 0x04, 0x77, 0x6b, 0xf2, 0x4e, 0x06, 0xcd,
	0x23, 0x76, 0x4b, 0x44, 0x5f, 0xec, 0x89, 0xde, 0xcb, 0xc9, 0xbc, 0x51, 0xb4, 0xc9, 0xea, 0x8d,
	0x93, 0x97, 0xb7, 0x3f, 0xb7, 0xa2, 0xd0, 0x99, 0x1d, 0xaa, 0x24, 0xbe, 0xfa, 0x1b, 0x00, 0x00,
	0xff, 0xff, 0x9c, 0x63, 0x54, 0x48, 0xc8, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UnderflowMasterServiceClient is the client API for UnderflowMasterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UnderflowMasterServiceClient interface {
	Handshake(ctx context.Context, in *HandshakeRequest, opts ...grpc.CallOption) (*HandshakeResponse, error)
	Stream(ctx context.Context, opts ...grpc.CallOption) (UnderflowMasterService_StreamClient, error)
}

type underflowMasterServiceClient struct {
	cc *grpc.ClientConn
}

func NewUnderflowMasterServiceClient(cc *grpc.ClientConn) UnderflowMasterServiceClient {
	return &underflowMasterServiceClient{cc}
}

func (c *underflowMasterServiceClient) Handshake(ctx context.Context, in *HandshakeRequest, opts ...grpc.CallOption) (*HandshakeResponse, error) {
	out := new(HandshakeResponse)
	err := c.cc.Invoke(ctx, "/underflow.common.UnderflowMasterService/Handshake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *underflowMasterServiceClient) Stream(ctx context.Context, opts ...grpc.CallOption) (UnderflowMasterService_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_UnderflowMasterService_serviceDesc.Streams[0], "/underflow.common.UnderflowMasterService/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &underflowMasterServiceStreamClient{stream}
	return x, nil
}

type UnderflowMasterService_StreamClient interface {
	Send(*MinionMessage) error
	Recv() (*MasterMessage, error)
	grpc.ClientStream
}

type underflowMasterServiceStreamClient struct {
	grpc.ClientStream
}

func (x *underflowMasterServiceStreamClient) Send(m *MinionMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *underflowMasterServiceStreamClient) Recv() (*MasterMessage, error) {
	m := new(MasterMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UnderflowMasterServiceServer is the server API for UnderflowMasterService service.
type UnderflowMasterServiceServer interface {
	Handshake(context.Context, *HandshakeRequest) (*HandshakeResponse, error)
	Stream(UnderflowMasterService_StreamServer) error
}

// UnimplementedUnderflowMasterServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUnderflowMasterServiceServer struct {
}

func (*UnimplementedUnderflowMasterServiceServer) Handshake(ctx context.Context, req *HandshakeRequest) (*HandshakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Handshake not implemented")
}
func (*UnimplementedUnderflowMasterServiceServer) Stream(srv UnderflowMasterService_StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}

func RegisterUnderflowMasterServiceServer(s *grpc.Server, srv UnderflowMasterServiceServer) {
	s.RegisterService(&_UnderflowMasterService_serviceDesc, srv)
}

func _UnderflowMasterService_Handshake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandshakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnderflowMasterServiceServer).Handshake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/underflow.common.UnderflowMasterService/Handshake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnderflowMasterServiceServer).Handshake(ctx, req.(*HandshakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnderflowMasterService_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UnderflowMasterServiceServer).Stream(&underflowMasterServiceStreamServer{stream})
}

type UnderflowMasterService_StreamServer interface {
	Send(*MasterMessage) error
	Recv() (*MinionMessage, error)
	grpc.ServerStream
}

type underflowMasterServiceStreamServer struct {
	grpc.ServerStream
}

func (x *underflowMasterServiceStreamServer) Send(m *MasterMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *underflowMasterServiceStreamServer) Recv() (*MinionMessage, error) {
	m := new(MinionMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _UnderflowMasterService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "underflow.common.UnderflowMasterService",
	HandlerType: (*UnderflowMasterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Handshake",
			Handler:    _UnderflowMasterService_Handshake_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _UnderflowMasterService_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}

// UnderflowMinionServiceClient is the client API for UnderflowMinionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UnderflowMinionServiceClient interface {
	ReverseHandshake(ctx context.Context, in *ReverseHandshakeRequest, opts ...grpc.CallOption) (*ReverseHandshakeResponse, error)
	ReverseHandshakeAck(ctx context.Context, in *ReverseHandshakeAckRequest, opts ...grpc.CallOption) (*ReverseHandshakeAckResponse, error)
	Stream(ctx context.Context, opts ...grpc.CallOption) (UnderflowMinionService_StreamClient, error)
}

type underflowMinionServiceClient struct {
	cc *grpc.ClientConn
}

func NewUnderflowMinionServiceClient(cc *grpc.ClientConn) UnderflowMinionServiceClient {
	return &underflowMinionServiceClient{cc}
}

func (c *underflowMinionServiceClient) ReverseHandshake(ctx context.Context, in *ReverseHandshakeRequest, opts ...grpc.CallOption) (*ReverseHandshakeResponse, error) {
	out := new(ReverseHandshakeResponse)
	err := c.cc.Invoke(ctx, "/underflow.common.UnderflowMinionService/ReverseHandshake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *underflowMinionServiceClient) ReverseHandshakeAck(ctx context.Context, in *ReverseHandshakeAckRequest, opts ...grpc.CallOption) (*ReverseHandshakeAckResponse, error) {
	out := new(ReverseHandshakeAckResponse)
	err := c.cc.Invoke(ctx, "/underflow.common.UnderflowMinionService/ReverseHandshakeAck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *underflowMinionServiceClient) Stream(ctx context.Context, opts ...grpc.CallOption) (UnderflowMinionService_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_UnderflowMinionService_serviceDesc.Streams[0], "/underflow.common.UnderflowMinionService/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &underflowMinionServiceStreamClient{stream}
	return x, nil
}

type UnderflowMinionService_StreamClient interface {
	Send(*MasterMessage) error
	Recv() (*MinionMessage, error)
	grpc.ClientStream
}

type underflowMinionServiceStreamClient struct {
	grpc.ClientStream
}

func (x *underflowMinionServiceStreamClient) Send(m *MasterMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *underflowMinionServiceStreamClient) Recv() (*MinionMessage, error) {
	m := new(MinionMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UnderflowMinionServiceServer is the server API for UnderflowMinionService service.
type UnderflowMinionServiceServer interface {
	ReverseHandshake(context.Context, *ReverseHandshakeRequest) (*ReverseHandshakeResponse, error)
	ReverseHandshakeAck(context.Context, *ReverseHandshakeAckRequest) (*ReverseHandshakeAckResponse, error)
	Stream(UnderflowMinionService_StreamServer) error
}

// UnimplementedUnderflowMinionServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUnderflowMinionServiceServer struct {
}

func (*UnimplementedUnderflowMinionServiceServer) ReverseHandshake(ctx context.Context, req *ReverseHandshakeRequest) (*ReverseHandshakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReverseHandshake not implemented")
}
func (*UnimplementedUnderflowMinionServiceServer) ReverseHandshakeAck(ctx context.Context, req *ReverseHandshakeAckRequest) (*ReverseHandshakeAckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReverseHandshakeAck not implemented")
}
func (*UnimplementedUnderflowMinionServiceServer) Stream(srv UnderflowMinionService_StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}

func RegisterUnderflowMinionServiceServer(s *grpc.Server, srv UnderflowMinionServiceServer) {
	s.RegisterService(&_UnderflowMinionService_serviceDesc, srv)
}

func _UnderflowMinionService_ReverseHandshake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReverseHandshakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnderflowMinionServiceServer).ReverseHandshake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/underflow.common.UnderflowMinionService/ReverseHandshake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnderflowMinionServiceServer).ReverseHandshake(ctx, req.(*ReverseHandshakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnderflowMinionService_ReverseHandshakeAck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReverseHandshakeAckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnderflowMinionServiceServer).ReverseHandshakeAck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/underflow.common.UnderflowMinionService/ReverseHandshakeAck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnderflowMinionServiceServer).ReverseHandshakeAck(ctx, req.(*ReverseHandshakeAckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnderflowMinionService_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UnderflowMinionServiceServer).Stream(&underflowMinionServiceStreamServer{stream})
}

type UnderflowMinionService_StreamServer interface {
	Send(*MinionMessage) error
	Recv() (*MasterMessage, error)
	grpc.ServerStream
}

type underflowMinionServiceStreamServer struct {
	grpc.ServerStream
}

func (x *underflowMinionServiceStreamServer) Send(m *MinionMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *underflowMinionServiceStreamServer) Recv() (*MasterMessage, error) {
	m := new(MasterMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _UnderflowMinionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "underflow.common.UnderflowMinionService",
	HandlerType: (*UnderflowMinionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReverseHandshake",
			Handler:    _UnderflowMinionService_ReverseHandshake_Handler,
		},
		{
			MethodName: "ReverseHandshakeAck",
			Handler:    _UnderflowMinionService_ReverseHandshakeAck_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _UnderflowMinionService_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}
